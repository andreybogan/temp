<?php
/*
 * 1) Создаем страницу, которая содержит форму.
 * 2) Создаем класс конвертиции pdf в img.
 * 3) Пишием метод, который создаем уникальльное имя для зипархива.
 * 4) Пишем метод, который создает зипархив с уникальным именем.
 * 5) Пишем метод, который возвращает ссылку на зипархив.
 * 6) метод, который клонирует файлы сладера (index.html, assets) в только что созданный зип файал.
 * 7) метод, общий метод загрузки файла, который будет в себе содержать:
 *      - метод который возвращает код ошибки загружаемого файла,
 *      - метод, который осуществляет проверку соглассно заданным параметрам (размер, ориентация, кол-во страниц).
 *      - метод, который конвертирует pdf файл в jpg и созраняет полученные изображения в зипархиве.
 * 8) Перенаправляем страницу на файл index.html в зипархиве, чтобы пользователь мог посмотреть результат конвертации.
 * 9) Предоставить пользователю возможность сохранить файл архива на компьютер.
 * 10) Для того чтобы организовать доступность ссылки на сервере в течении 30 минут, можно запустить через cron скрипт,
 * который каждую минуту будет сканировать дирректорию с зипархивами и проверять, если она была создана позже
 * позже 30 минут наза, то удалять ее и ее содержимое.
 * */

if ($_REQUEST['submit']) {
    // Проверяем, принят ли файл.
    if (is_uploaded_file($_FILES['fileName']['tmp_name'])) {
        // Используем библиотеку ImageMagick для преобразований.
        $imagick = new Imagick();
        // Считывает изображение из имени файла.
        $imagick->readImage($_FILES['fileName']['tmp_name']);
        // Количество страницы в pdf файле.
        $page = $imagick->getIteratorIndex();
        // Записывает изображение или последовательность изображений
        $imagick->writeImages(__DIR__ . '/converted.jpg', false);
    }
}


//DirectoryIterator::getCTime — Возвращает время последнего изменения i-узла текущего элемента DirectoryIterator
//DirectoryIterator::getSize — Возвращает размер текущего элемента DirectoryIterator
//Пример:
//$iterator = new DirectoryIterator(dirname(__FILE__));
//foreach ($iterator as $fileinfo) {
//    if ($fileinfo->isFile()) {
//        echo $fileinfo->getFilename() . " " . $fileinfo->getSize() . " " . $fileinfo->getCTime(). "\n";
//    }
//}

//// Создание и удаление директории и файла.
//if (!is_dir('examples')) {
//    mkdir('examples');
//}
//unlink('test.html');
//rmdir('examples');

// Создание zip архива.
//$zip = new ZipArchive();
//$filename = "./test.zip";
//
//if ($zip->open($filename, ZipArchive::CREATE)!==TRUE) {
//    exit("Невозможно открыть <$filename>\n");
//}